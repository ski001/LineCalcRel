// ---------------
// 21カードゲーム
// CPU と USER 2人勝負
// ---------------
{
 bindres(gm,context), // ゲームのコンテキストリソース作成
 setrcom(gm,"21ゲーム"),

// -----------------------------------------------------------------------
// -----------------------------------------------------------------------
// ---------------
// プレイヤー親クラス
// @1:CCardコンテキストリソースID
// @2:CDispコンテキストリソースID
// @3:表示x座標
// @4:表示y座標
// ---------------
 fnc(gm.newCPlayer,
// ++
  {
   ctx = context, // クラスのコンテキストリソース作成
   setrcom(ctx,"プレイヤー親クラス"),
   ctx.card = @1, // CCardのコンテキストリソースID
   ctx.disp = @2, // CDispのコンテキストリソースID
   ctx.x = @3, // 表示座標
   ctx.y = @4, // 表示座標
   ctx.money = 100 , // 所持金
   ctx.bet = 0 , // 掛け金
   ctx.lv = 1 , // レベル
   ctx.name = "" , // 名前

// -----------------------------------------------------------------------
   // -------------
   // カードを引くか考える(override)
   // return : 1->引く 0->そのまま
   // -------------
   fnc(ctx.consider,
// ++
    {
     1
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // 掛け金を掛ける(override)
   // -------------
   fnc(ctx.betMoney,
// ++
    {
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // 手札の文字列を得る(override)
   // @1:0->ゲーム中 1->ゲーム終了
   // return : 手札文字列
   // -------------
   fnc(ctx.getCardStr,
// ++
    {
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // 手札の情報文字列を得る(override)
   // @1:0->ゲーム中 1->ゲーム終了
   // return : 手札文字列
   // -------------
   fnc(ctx.getInfoStr,
// ++
    {
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // 情報表示
   // @1:0->ゲーム中 1->ゲーム終了
   // -------------
   fnc(ctx.dispInfo,
// ++
    {
     st = this.getCardStr(@1),
     info = this.getInfoStr(@1),
     this.disp.dprint(this.x , this.y ,"+------" & this.name & "------"),
     this.disp.dprint(this.x , this.y + 1 , "|CARD :[" & st & "]"),
     this.disp.dprint(this.x , this.y + 2 , "|MONEY:" & this.money & info & "     "),
     this.disp.dprint(this.x , this.y + 3 , "|BET  :" & this.bet & "                   ")
    }
// ++
   ),
// -----------------------------------------------------------------------


// -----------------------------------------------------------------------
   // -------------
   // カードクリア
   // -------------
   fnc(ctx.init,
// ++
    {
     del(this.cardlis),
     this.bet = 0 
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // 所持金リセット
   // -------------
   fnc(ctx.moneyInit,
// ++
    {
     this.money = 100 ,
     if(this.lv > 1 , 
      this.money = this.money = this.moneybk * 2
     ),
     this.moneybk = this.money,
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // カードを1枚引く
   // return : 1->引いた 0->そのまま
   // -------------
   fnc(ctx.getCard,
// ++
    {
     ret = if(len(this.cardlis) <= 1 , 1 , this.consider), // 引くか考える
     if(ret ,
      this.cardlis[len(this.cardlis)] = this.card.getCard // カードを引く
     ),
     ret
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // カードの合計で一番いい点数を返す
   // [@1:ネスト数]
   // [@2:直前までの合計]
   // return : ["ten"::点数, "sum"::[全ての合計]]
   //          callcnt.(@1)[] : 全ての合計
   // -------------
   fnc(ctx.getCardSum,
// ++
    {
     if(!isdef(@1),(/*トップ呼び出し*/del(this.sumlis),cnt = 0 ,sum = 0), (/*2回目以降*/cnt = @1,sum = @2)), // ネスト数,合計
     if(!isdef(this.cardlis[cnt]),(/*終了*/ this.sumlis[len(this.sumlis)] = sum,return(["ten"::sum, "sum"::[]]))), // 最後まで計算したら this.sumlis に合計を追加
     lis = this.cardlis[cnt].getVal, // 値リストを得る
     // 値リスト分計算
     sumbk = sum ,
     fordim(tag,lis,
      {
       sum = sum + lis[tag],
       this.getCardSum(cnt + 1 , sum), // 次のカードの計算
       sum = sumbk
      }
     ),
     // this.sumlis にリストが出来ている
     if(!isdef(@1),
      {
       // トップ呼び出しなので一番いい手を返す
       bestval = 0 ,
       fordim(tag,this.sumlis,
        {
         v = this.sumlis[tag],
         if(v <= 21 && bestval < v , bestval = v)
        }
       ),
       if(bestval == 0 && len(this.cardlis) > 0 ,
        {
         // 21以上
         sort(this.sumlis),
         fordim(tag,this.sumlis,
          {
           bestval = this.sumlis[tag],
           break
          }
         )
        }
       ),
       retsumlis = [], 
//       del(callcnt.(@1)),
//       // 全ての合計を callcnt.(@1)[] に返す
        // 全ての合計を retsumlis に作る
       fordim(tag,this.sumlis,
        {
         tmp[this.sumlis[tag]] = 1
        }
       ),
       fordim(tag,tmp,
        {
         appenddim([tag], retsumlis), 
//         callcnt.(@1)[len(callcnt.(@1))] = tag
        }
       ),
       sort(retsumlis), 
//       sort(callcnt.(@1)),
       ["ten"::bestval, "sum"::retsumlis]
      }
     )
    }
// ++
   ),
// -----------------------------------------------------------------------

   ctx // クラスのコンテキストリソースを返す
  }
// ++
 ),
// -----------------------------------------------------------------------
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
// -----------------------------------------------------------------------
 // ---------------
 // CPUクラス
 // CPU プレイヤー
 // CPlayer を継承
 // @1:CCardコンテキストリソースID
 // @2:CDispコンテキストリソースID
 // @3:表示x座標
 // @4:表示y座標
 // ---------------
 fnc(gm.newCCpu,
// ++
  {
   ctx = this.newCPlayer(@1,@2,@3,@4), // クラスのコンテキストリソース作成(CPlayer継承)
   setrcom(ctx,"CPU:" & getrcom(ctx)),
   ctx.name = "CPU", // 名前

// -----------------------------------------------------------------------
   // -------------
   // 手札の文字列を得る(override)
   // @1:0->ゲーム中 1->ゲーム終了
   // return : 手札文字列
   // -------------
   fnc(ctx.getCardStr,
// ++
    {
     st = "",
     first = if(@1 , 0 , 1) ,
     fordim(tag,this.cardlis,
      {
       v = if(first , (first = 0 , "* "), this.cardlis[tag].getStr),
       st = st & v & " "
      }
     )
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // 手札の情報文字列を得る(override)
   // @1:0->ゲーム中 1->ゲーム終了
   // return : 手札文字列
   // -------------
   fnc(ctx.getInfoStr,
// ++
    {
     ""
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // 掛け金を掛ける(override)
   // -------------
   fnc(ctx.betMoney,
// ++
    {
     // 手札から最高割合を決める
//     bestval = this.getCardSum(^tmp), // 1～11(10%～50%)
     ret = this.getCardSum(), // 1～11(10%～50%)
     bestval = ret["ten"], 
     tmp = ret["sum"], 
     betrate = bestval / 11 * 0.5 ,
     if(len(tmp) > 1 ,
      { // A , JOKER を引いた
       betrate = betrate + 0.20 , // 70%
       if(len(tmp) > 2 ,
        { // JOKER を引いた
         betrate = betrate + 0.20 , // 90%
        }
       )
      }
     ),

     rng = this.money * betrate * 0.2 , // 20% の範囲でぶらす
     base = this.money * betrate - rng, // 最低掛け金
     this.bet = int(base + rnd(rng)),
     this.money = this.money - this.bet ,
     this.disp.blink(this.x , this.y + 4 , "    *BET:" & this.bet , 2),
     this.disp.dprint(this.x , this.y + 4 , "                         ")
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // カードを引くか考える(override)
   // return : 1->引く 0->そのままn
   // -------------
   fnc(ctx.consider,
// ++
    {
     missrate = (5 - this.lv) / 5 ,  // 失敗レート
     if(missrate < 0 , missrate = 0),

//     bestval = this.getCardSum(^tmp),
     ret = this.getCardSum(),
     bestval = ret["ten"], 
     tmp = ret["sum"], 
     cardrate = (18 - bestval) / 15 , // カードを引くレート
     if(cardrate < 0 , cardrate = 0),
     if(len(tmp) > 1 && bestval < 21 , 
      { // A , JOKER
       cardrate = 0.5 , // A
       if(len(tmp) > 2 , 
        {
         cardrate = 1.0 , // JOKER
        }
       )
      }
     ),

     if(rnd(100) <= (cardrate * 100) ,
      {
       ans = 1 // カードを引く
      },
      {
       ans = 0 // カードを引かない
      }
     ),
     if(rnd(100) < (missrate * 100) ,
      {
       ans = !ans // ミス
      }
     ),
     if(ans , 
      // get card
      {
       this.disp.blink(this.x , this.y + 4 , "    *GET CARD*" , 2),
      },
      // stay
      {
       this.disp.blink(this.x , this.y + 4 , "    *STAY*" , 2),
      }
     ),
     ans
    }
// ++
   ),
// -----------------------------------------------------------------------

   ctx // クラスのコンテキストリソースを返す
  }
// ++
 ),
// -----------------------------------------------------------------------
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
// -----------------------------------------------------------------------
 // ---------------
 // USERクラス
 // USER プレイヤー
 // CPlayer を継承
 // @1:CCardコンテキストリソースID
 // @2:CDispコンテキストリソースID
 // @3:表示x座標
 // @4:表示y座標
 // ---------------
 fnc(gm.newCUser,
// ++
  {
   ctx = this.newCPlayer(@1,@2,@3,@4), // クラスのコンテキストリソース作成(CPlayer継承)
   setrcom(ctx,"プレイヤー:" & getrcom(ctx)),
   ctx.name = "USER", // 名前

// -----------------------------------------------------------------------
   // -------------
   // 手札の文字列を得る(override)
   // @1:0->ゲーム中 1->ゲーム終了
   // return : 手札文字列
   // -------------
   fnc(ctx.getCardStr,
// ++
    {
     st = "",
     fordim(tag,this.cardlis,
      {
       v = this.cardlis[tag].getStr,
       st = st & v & " "
      }
     )
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // 手札の情報文字列を得る(override)
   // @1:0->ゲーム中 1->ゲーム終了
   // return : 手札文字列
   // -------------
   fnc(ctx.getInfoStr,
// ++
    {
//     bestval = this.getCardSum(^sumlis),
     ret = this.getCardSum(),
     bestval = ret["ten"], 
     sumlis = ret["sum"], 
     " BEST:" & bestval & " SUM LIST: {" & (st = "" , fordim(tag,sumlis,st = st & sumlis[tag] & " ")) & "}"
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // 掛け金を掛ける(override)
   // -------------
   fnc(ctx.betMoney,
// ++
    {
     while(1 ,
      {
       bet = input("掛け金を入力してください",0),
       if((this.money - bet) >= 0 && bet > 0 , (this.money = this.money - bet , this.bet = bet , break))
      }
     )
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // カードを引くか考える(override)
   // return : 1->引く 0->そのまま
   // -------------
   fnc(ctx.consider,
// ++
    {
     this.disp.dprint(this.x , this.y + 4 , "GET CARD:y STAY:n"),
     this.disp.disp,
     y = 0 , 
     n = 0 ,
     while(!y && !n , (delay(10) , y = rinput(^y) , n = rinput(^n))),
     this.disp.dprint(this.x , this.y + 4 , "                 "),
     if(y , 
      // get card
      {
       this.disp.blink(this.x , this.y + 4 , "    *GET CARD*" , 2),
      },
      // stay
      {
       this.disp.blink(this.x , this.y + 4 , "    *STAY*" , 2),
      }
     ),
     this.disp.dprint(this.x , this.y + 4 , "              "),
     this.disp.disp,
     y
    }
// ++
   ),
// -----------------------------------------------------------------------

   ctx // クラスのコンテキストリソースを返す
  }
// ++
 ),
// -----------------------------------------------------------------------
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
// -----------------------------------------------------------------------
 // ---------------
 // OneCARDクラス
 // カード1つのクラス
 // @1:カード番号
 // @2:シャッフル乱数
 // ---------------
 fnc(gm.newCOneCard,
// ++
  {
   ctx = context, // クラスのコンテキストリソース作成
   setrcom(ctx,"カード１つ"),

   ctx.num = @1 , // カード番号
   ctx.used = 0 , // 引かれた後か
   ctx.rndnum = @2 , // シャッフル用乱数設定

// -----------------------------------------------------------------------
   // -------------
   // カードの値を得る
   // return : 値の配列
   // -------------
   fnc(ctx.getVal,
// ++
    {
     // J・Q・K
     if(this.num == 11 || this.num == 12 || this.num == 13 , return([10])),
     // A
     if(this.num == 1 , return([1 , 11])),
     // JOKER
     if(this.num == 14 , 
      return([0 , 1 , 10 ,11])
     ),
     // 2～10
     return([this.num])
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // カードの文字を得る
   // -------------
   fnc(ctx.getStr,
// ++
    {
     // J・Q・K
     if(this.num == 11 ,return("J ")),
     if(this.num == 12 ,return("Q ")),
     if(this.num == 13 ,return("K ")),
     // A
     if(this.num == 1 ,return("A ")),
     // JOKER
     if(this.num == 14 ,return("🃏 ")), 
     // 2～9
     if(this.num >= 2 && this.num <= 9 , return(this.num & " ")),
     // 10
     return(10)
    }
// ++
   ),
// -----------------------------------------------------------------------

   ctx // クラスのコンテキストリソースを返す
  }
// ++
 ),
// -----------------------------------------------------------------------
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
// -----------------------------------------------------------------------

 // ---------------
 // CARDクラス
 // カードクラス
 // @1:ゲームクラスのコンテキストリソースID
 // ---------------
 fnc(gm.newCCard,
// ++
  {
   ctx = context, // クラスのコンテキストリソース作成
   setrcom(ctx,"カード"),
   ctx.gm = @1 , // ゲームコンテキストリソースID保存

// -----------------------------------------------------------------------
   // -------------
   // シャッフルの為のユニークな乱数を作る
   // -------------
   fnc(ctx.getRnd,
// ++
    {
     while(1 , 
      {
       rndnum = rnd(10000),
       flg = 0 , 
       fordim(tag,this.cardlis,
        if(rndnum == this.cardlis[tag].rndnum , flg = 1)
       ),
       if(!flg , break) // ユニークな乱数取得成功
      }
     ),
     rndnum
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // カードを初期化する
   // -------------
   fnc(ctx.init,
// ++
    {
     del(this.cardlis), // カードリストを消去
     this.pos = 0 , // カードを引く位置

     cnt = 0 , // 配列インデックス
     for(num , 1 , 13 , 1 ,
      for(num2 , 1 , 4 , 1 , // クラブ、ダイヤ、ハート、スペード分
       {
        // シャッフルの為のユニークな乱数を作る
        rndnum = this.getRnd,
        bindres(this.cardlis[cnt],this.gm.newCOneCard(num,rndnum)) , // カード作成
        cnt = cnt + 1
       }
      )
     ),

     // ジョーカーを入れる
     rndnum = this.getRnd,
     bindres(this.cardlis[cnt],this.gm.newCOneCard(14 ,rndnum)),

     // シャッフルする
     sort(this.cardlis,"{v1 = this.cardlis[ind1].rndnum , v2 = this.cardlis[ind2].rndnum , if(v1 > v2 , 1 , if(v1 == v2 , 0 , -1))}"),
    }
// ++
   ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
   // -------------
   // カードを引く
   // -------------
   fnc(ctx.getCard,
// ++
    {
     cnt = 0 , 
     fordim(tag , this.cardlis , 
      {
       if(cnt == this.pos ,
        {
         this.pos = this.pos + 1 ,
         this.cardlis[tag].used = 1 ,
         return(this.cardlis[tag])
        }
       ),
       cnt = cnt + 1
      }
     ),
     -1 // カードが無い
    }
// ++
   ),
// -----------------------------------------------------------------------

   ctx // クラスのコンテキストリソースを返す
  }
// ++
 ),
// -----------------------------------------------------------------------
// -----------------------------------------------------------------------

// ---------------
// ゲームメイン
// ---------------

// -----------------------------------------------------------------------
 // -------------
 // 画面表示
 // @1:0->ゲーム中 1->ゲーム終了
 // -------------
 fnc(gm.dispGame,
  {
   this.cpu.dispInfo(@1),
   this.user.dispInfo(@1),
   this.disp.dprint(0 , 1 , " SCORE : " & this.score & " LEVEL : " & this.cpu.lv),

   this.disp.disp
  }
 ),
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------
 // -------------
 // main メンバ関数
 // -------------
 fnc(gm.main,
// ++
  {
   bindres(this.disp,newCDisp), // 仮想画面作成
   bindres(this.card,this.newCCard(this)), // CARD
   bindres(this.cpu,this.newCCpu(this.card,this.disp , 0 , 2)), // CPU
   bindres(this.user,this.newCUser(this.card,this.disp , 30 , 2)), // USER
   this.score = 0 , // スコア

   // タイトル表示
   this.disp.dprint(10 , 4 , "21 card game"),
   while(1 , 
    {
     this.disp.dprint(7 ,6 ,"Push sps to start"),
     this.disp.disp,
     delay(100),
     this.disp.dprint(7 ,6 ,"                 "),
     this.disp.disp,
     if(rinput(^sps), break),
     delay(50)
    }
   ),

   // 初期化
   this.card.init,
   this.cpu.init,
   this.user.init,
   this.cpu.moneyInit,
   this.user.moneyInit,

   clearcnt = 0 , // レベルクリアまでのカウント
   while(this.cpu.money > 0 && this.user.money > 0 ,
    {
     // 画面初期化
     this.disp.clear,
     this.disp.dprint(0 , 0 , "   ------------- TWENTY ONE -------------"),

     // 初期手札を配る
     this.cpu.getCard,
     this.user.getCard,
     this.dispGame(0),

     // 掛け金を掛ける
     this.cpu.betMoney,
     this.dispGame(0),
     this.user.betMoney,
     this.dispGame(0),

     // 1枚引く
     this.cpu.getCard,
     this.user.getCard,
     this.dispGame(0), 

     // もう一枚引くか決める
     this.cpu.getCard,
     this.dispGame(0), 
     this.user.getCard,
     this.dispGame(0),

     // カード全表示
     this.dispGame(1),
//     this.disp.blink(0 , 8 , "CPU:" & this.cpu.getCardSum(^tmp) & " USER:" & this.user.getCardSum(^tmp) , 3),
     cpuv = (this.cpu.getCardSum())["ten"], 
     userv = (this.user.getCardSum())["ten"], 
     this.disp.blink(0 , 8 , "CPU:" & cpuv & " USER:" & userv , 3),

     // 勝ち負け判定
//     cpubest = this.cpu.getCardSum(^tmp),
     cpubest = (this.cpu.getCardSum())["ten"],
//     userbest = this.user.getCardSum(^tmp),
     userbest = (this.user.getCardSum())["ten"],
     draw = 0 , 
     userwin = 0 , 
     if((cpubest > 21 && userbest > 21) || (cpubest == userbest) ,
      // 引き分け
      {
       draw = 1
      },
      // 引き分け以外
      if(cpubest > 21 ,
       // user が勝ち
       {
        userwin = 1
       },
       // cpu が勝ち
       if(userbest > 21 , 
        {
         userwin = 0
        },
        if(userbest > cpubest ,
         // user が勝ち
         userwin = 1
        )
       )
      )
     ),
     if(draw , 
      // 引き分け
      {
       this.disp.blink(0 , 9 , "DRAW" , 3),
       this.cpu.money = this.cpu.money + this.cpu.bet ,
       this.user.money = this.user.money + this.user.bet
      },
      if(userwin ,
       // userが勝ち
       {
        this.disp.blink(0 , 9 , "USER WIN" , 3),
        this.cpu.money = this.cpu.money - this.user.bet ,
        this.user.money = this.user.money + this.user.bet * 2 + this.cpu.bet
       },
       // cpuが勝ち
       {
        this.disp.blink(0 , 9 , "CPU WIN" , 3),
        this.cpu.money = this.cpu.money + this.cpu.bet * 2 + this.user.bet ,
        this.user.money = this.user.money - this.cpu.bet
       }
      )
     ),

     this.dispGame(1),
     clearcnt = clearcnt + 1 ,

     if(!draw && this.cpu.money <= 0 ,
      // user win
      {
       this.disp.blink(0 , 9 , "******* NEXT LEVEL *******" , 3),
       this.cpu.lv = this.cpu.lv + 1 ,
       this.score = this.score + this.cpu.lv * 1000 ,
       addscore = (10 - clearcnt) * 100 , // 回数ボーナス
       if(addscore < 0 , addscore = 0),
       this.score = this.score + addscore,
       this.cpu.moneyInit,
       clearcnt = 0
      }
     ),

     // 初期化
     this.card.init,
     this.cpu.init,
     this.user.init,
    }
   ),
   this.disp.blink(0 , 10 , "          GAME OVER                ",3),
   this.disp.disp
  }
// ++
 ),
// -----------------------------------------------------------------------

 // ゲーム起動
 gm.main
}
